package hackoverload.v1.testcases;

import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import static org.junit.Assert.assertEquals;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;

import hackoverload.v1.pageobjects.LoginPageObject;
import hackoverload.v1.pageobjects.NavbarPageObject;

import util.BrowserManager;

public class LoginPageTests {

	WebDriver driver;
	
	@BeforeSuite
	public void setup() {
		driver = BrowserManager.getDriver("chrome");
	}
	
	@BeforeMethod
	public void beforeEach() {
		driver.get("https://stackoverflowclone-pk3b.onrender.com/login");
		NavbarPageObject navbarPageInstance = new NavbarPageObject(driver);
		if (navbarPageInstance.loggedIn()) navbarPageInstance.logout();
	}
	
	@Test
	public void testDemoLogin() {
		LoginPageObject loginPageInstance = new LoginPageObject(driver);
		assertEquals("https://stackoverflowclone-pk3b.onrender.com/login",driver.getCurrentUrl());
		loginPageInstance.clickDemoLogin();
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("log-out-button")));
		assertEquals("Login failed","https://stackoverflowclone-pk3b.onrender.com/questions?page=1",driver.getCurrentUrl());
	}
	
	@Test
	public void testManualLogin() {
		LoginPageObject loginPageInstance = new LoginPageObject(driver);
		assertEquals("https://stackoverflowclone-pk3b.onrender.com/login",driver.getCurrentUrl());
		loginPageInstace.
	}
	
	@AfterSuite
	public void cleanup() {
		driver.close();
	}
	
}
